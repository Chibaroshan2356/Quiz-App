import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { quizAPI } from '../../services/api';
import { FiPlus, FiTrash2, FiSave, FiArrowLeft, FiClock } from 'react-icons/fi';
import AdminLayout from '../../components/layout/AdminLayout';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import { toast } from 'react-hot-toast';

const difficultyOptions = [
  { value: 'easy', label: 'Easy' },
  { value: 'medium', label: 'Medium' },
  { value: 'hard', label: 'Hard' }
];

const timeLimitOptions = [
  { value: 5, label: '5 minutes' },
  { value: 10, label: '10 minutes' },
  { value: 15, label: '15 minutes' },
  { value: 30, label: '30 minutes' },
  { value: 45, label: '45 minutes' },
  { value: 60, label: '1 hour' },
  { value: 90, label: '1.5 hours' },
  { value: 120, label: '2 hours' }
];

const initialQuestion = {
  question: '',
  options: ['', ''],
  correctAnswer: 0,
  points: 1
};

const CreateQuiz = () => {
  const navigate = useNavigate();
  const [saving, setSaving] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const [categories, setCategories] = useState([
    'General', 'Science', 'Technology', 'History', 'Sports', 'Entertainment'
  ]);
  
  const [quizData, setQuizData] = useState({
    title: '',
    description: '',
    category: '',
    difficulty: 'medium',
    timeLimit: 30,
    questions: [JSON.parse(JSON.stringify(initialQuestion))]
  });
  
  const [loading, setLoading] = useState(true);
  const [activeQuestion, setActiveQuestion] = useState(0);

  // Fetch quiz data if editing
  useEffect(() => {
    const fetchQuiz = async () => {
      const { id } = useParams?.() || {};
      if (!id) return;
      
      try {
        const response = await quizAPI.get(`/quizzes/${id}`);
        setQuizData(response.data);
        // Ensure at least one question exists
        if (response.data.questions.length === 0) {
          setQuizData(prev => ({
            ...prev,
            questions: [{
              question: '',
              options: ['', '', '', ''],
              correctAnswer: 0,
              explanation: '',
              points: 1,
              type: 'multiple_choice',
              tags: []
            }]
          }));
        }
      } catch (error) {
        console.error('Error fetching quiz:', error);
        toast.error('Failed to load quiz');
        navigate('/admin/quizzes');
      } finally {
        setLoading(false);
      }
    };

    fetchQuiz();
  }, [id, navigate]);

  // Fetch categories
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await quizAPI.get('/quizzes/categories');
        setCategories(response.data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  const handleInputChange = (field, value) => {
    setQuizData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleQuestionChange = (questionIndex, field, value) => {
    setQuizData(prev => ({
      ...prev,
      questions: prev.questions.map((question, index) =>
        index === questionIndex
          ? { ...question, [field]: value }
          : question
      )
    }));
  };

  const handleOptionChange = (questionIndex, optionIndex, value) => {
    setQuizData(prev => ({
      ...prev,
      questions: prev.questions.map((question, idx) =>
        idx === questionIndex
          ? {
              ...question,
              options: question.options.map((option, optIdx) =>
                optIdx === optionIndex ? value : option
              )
            }
          : question
      )
    }));
  };

  const handleCorrectAnswerChange = (questionIndex, optionIndex) => {
    setQuizData(prev => ({
      ...prev,
      questions: prev.questions.map((question, idx) =>
        idx === questionIndex
          ? { ...question, correctAnswer: optionIndex }
          : question
      )
    }));
  };

  const addOption = (questionIndex) => {
    setQuizData(prev => ({
      ...prev,
      questions: prev.questions.map((question, idx) =>
        idx === questionIndex
          ? {
              ...question,
              options: [...question.options, '']
            }
          : question
      )
    }));
  };

  const removeOption = (questionIndex, optionIndex) => {
    const question = quizData.questions[questionIndex];
    if (question.options.length <= 2) {
      toast.error('A question must have at least 2 options');
      return;
    }

    setQuizData(prev => {
      const newQuestions = [...prev.questions];
      const newOptions = [...newQuestions[questionIndex].options];
      newOptions.splice(optionIndex, 1);
      
      // Adjust correct answer index if needed
      let newCorrectAnswer = newQuestions[questionIndex].correctAnswer;
      if (newCorrectAnswer >= optionIndex && newCorrectAnswer > 0) {
        newCorrectAnswer--;
      } else if (newCorrectAnswer === optionIndex) {
        newCorrectAnswer = 0; // Default to first option if correct answer was removed
      }

      newQuestions[questionIndex] = {
        ...newQuestions[questionIndex],
        options: newOptions,
        correctAnswer: newCorrectAnswer
      };

      return {
        ...prev,
        questions: newQuestions
      };
    });
  };

  const addQuestion = () => {
    const newQuestion = {
      question: '',
      options: ['', ''],
      correctAnswer: 0,
      explanation: '',
      points: 1,
      type: 'multiple_choice',
      tags: []
    };

    setQuizData(prev => ({
      ...prev,
      questions: [...prev.questions, newQuestion]
    }));
    
    // Scroll to the new question
    setTimeout(() => {
      const questions = document.querySelectorAll('.question-card');
      if (questions.length > 0) {
        questions[questions.length - 1].scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
  };

  const removeQuestion = (questionIndex) => {
    if (quizData.questions.length <= 1) {
      toast.error('A quiz must have at least one question');
      return;
    }

    if (window.confirm('Are you sure you want to remove this question?')) {
      setQuizData(prev => ({
        ...prev,
        questions: prev.questions.filter((_, idx) => idx !== questionIndex)
      }));
      
      // Adjust active question if needed
      if (activeQuestion >= questionIndex && activeQuestion > 0) {
        setActiveQuestion(prev => prev - 1);
      }
    }
  };

  const validateQuiz = () => {
    // Validate basic quiz info
    if (!quizData.title.trim()) {
      toast.error('Quiz title is required');
      document.getElementById('quiz-title')?.focus();
      return false;
    }
    
    if (!quizData.category.trim()) {
      toast.error('Quiz category is required');
      document.getElementById('quiz-category')?.focus();
      return false;
    }

  const validateForm = () => {
    const errors = {};
    
    // Validate quiz metadata
    if (!quizData.title.trim()) {
      errors.title = 'Quiz title is required';
    }
    
    if (!quizData.category) {
      errors.category = 'Category is required';
    }
    
    // Validate questions
    for (let i = 0; i < quizData.questions.length; i++) {
      const question = quizData.questions[i];
      
      if (!question.question.trim()) {
        toast.error(`Question ${i + 1}: Question text is required`);
        setActiveQuestion(i);
        return false;
      }
      
      // Check for empty options
      const emptyOptions = question.options.filter(opt => !opt.trim());
      if (emptyOptions.length > 0) {
        toast.error(`Question ${i + 1}: All options must be filled`);
        setActiveQuestion(i);
        return false;
      }
      
      // Check for duplicate options
      const uniqueOptions = new Set(question.options.map(opt => opt.trim().toLowerCase()));
      if (uniqueOptions.size < question.options.length) {
        toast.error(`Question ${i + 1}: Duplicate options are not allowed`);
        setActiveQuestion(i);
        return false;
      }
      
      // Check if correct answer is set
      if (question.correctAnswer === null || question.correctAnswer === undefined) {
        errors[`correctAnswer_${i}`] = 'Please select a correct answer';
      }
      
      // Validate points
      if (question.points < 1) {
        errors[`points_${i}`] = 'Points must be at least 1';
      }
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };
}

const handleSubmit = async (e) => {
  e.preventDefault();
  
  if (!validateForm()) {
    toast.error('Please fix the form errors before submitting');
    return;
  }
  
  setSaving(true);
  
  try {
    // Format the data for the API
    const formattedData = {
      ...quizData,
      // Ensure questions have the correct format
      questions: quizData.questions.map(q => ({
        ...q,
        // Remove any empty options
        options: q.options.filter(opt => opt.trim() !== '')
      }))
    };
    
    // Call your API to create the quiz
    await quizAPI.post('/quizzes', formattedData);
    
    toast.success('Quiz created successfully!');
    navigate('/admin/quizzes');
  } catch (error) {
    console.error('Error creating quiz:', error);
    toast.error(error.response?.data?.message || 'Failed to create quiz');
  } finally {
    setSaving(false);
  }
};

  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center space-x-4 mb-8">
          <button
            onClick={() => navigate('/admin/quizzes')}
            className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <FiArrowLeft className="w-6 h-6" />
          </button>
          <div>
            <h1 className="text-4xl font-bold text-gray-900">Create New Quiz</h1>
            <p className="text-gray-600 text-lg mt-2">Design and configure your quiz content</p>
          </div>
        </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Quiz Basic Info */}
          <div className="card">
            <h2 className="text-xl font-semibold text-gray-900 mb-6">Quiz Information</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quiz Title *
                </label>
                <input
                  type="text"
                  value={quizData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  className="input"
                  placeholder="Enter quiz title"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Category *
                </label>
                <select
                  value={quizData.category}
                  onChange={(e) => handleInputChange('category', e.target.value)}
                  className="input"
                  required
                >
                  <option value="">Select category</option>
                  <option value="General">General</option>
                  <option value="Science">Science</option>
                  <option value="History">History</option>
                  <option value="Technology">Technology</option>
                  <option value="Sports">Sports</option>
                  <option value="Entertainment">Entertainment</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Difficulty
                </label>
                <select
                  value={quizData.difficulty}
                  onChange={(e) => handleInputChange('difficulty', e.target.value)}
                  className="input"
                >
                  <option value="easy">Easy</option>
                  <option value="medium">Medium</option>
                  <option value="hard">Hard</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Time Limit (seconds per question)
                </label>
                <input
                  type="number"
                  min="30"
                  max="300"
                  value={quizData.timeLimit}
                  onChange={(e) => handleInputChange('timeLimit', parseInt(e.target.value))}
                  className="input"
                />
              </div>
            </div>

            <div className="mt-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Description
              </label>
              <textarea
                value={quizData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                className="input"
                rows={3}
                placeholder="Enter quiz description (optional)"
              />
            </div>
          </div>

          {/* Questions */}
          <div className="card">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900">
                Questions ({quizData.questions.length})
              </h2>
              <button
                type="button"
                onClick={addQuestion}
                className="btn btn-primary flex items-center"
              >
                <FiPlus className="w-4 h-4 mr-2" />
                Add Question
              </button>
            </div>

            <div className="space-y-8">
              {quizData.questions.map((question, questionIndex) => (
                <div key={questionIndex} className="border border-gray-200 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-medium text-gray-900">
                      Question {questionIndex + 1}
                    </h3>
                    {quizData.questions.length > 1 && (
                      <button
                        type="button"
                        onClick={() => removeQuestion(questionIndex)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <FiTrash2 className="w-4 h-4" />
                      </button>
                    )}
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Question Text *
                      </label>
                      <textarea
                        value={question.question}
                        onChange={(e) => handleQuestionChange(questionIndex, 'question', e.target.value)}
                        className="input"
                        rows={3}
                        placeholder="Enter your question"
                        required
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Options *
                      </label>
                      <div className="space-y-2">
                        {question.options.map((option, optionIndex) => (
                          <div key={optionIndex} className="flex items-center space-x-3">
                            <input
                              type="radio"
                              name={`correct-${questionIndex}`}
                              checked={question.correctAnswer === optionIndex}
                              onChange={() => handleQuestionChange(questionIndex, 'correctAnswer', optionIndex)}
                              className="w-4 h-4 text-primary-600"
                            />
                            <input
                              type="text"
                              value={option}
                              onChange={(e) => handleOptionChange(questionIndex, optionIndex, e.target.value)}
                              className="input flex-1"
                              placeholder={`Option ${optionIndex + 1}`}
                              required
                            />
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Points
                        </label>
                        <input
                          type="number"
                          min="1"
                          max="10"
                          value={question.points}
                          onChange={(e) => handleQuestionChange(questionIndex, 'points', parseInt(e.target.value))}
                          className="input"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Explanation (optional)
                        </label>
                        <input
                          type="text"
                          value={question.explanation}
                          onChange={(e) => handleQuestionChange(questionIndex, 'explanation', e.target.value)}
                          className="input"
                          placeholder="Explain the correct answer"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={() => navigate('/admin/quizzes')}
              className="btn btn-secondary"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="btn btn-primary flex items-center"
            >
              {loading ? (
                <LoadingSpinner size="sm" className="mr-2" />
              ) : (
            </button>
          </div>

          <div className="space-y-8">
            {quizData.questions.map((question, questionIndex) => (
              <div key={questionIndex} className="border border-gray-200 rounded-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-gray-900">
                    Question {questionIndex + 1}
                  </h3>
                  {quizData.questions.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeQuestion(questionIndex)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <FiTrash2 className="w-4 h-4" />
                    </button>
                  )}
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Question Text *
                    </label>
                    <textarea
                      value={question.question}
                      onChange={(e) => handleQuestionChange(questionIndex, 'question', e.target.value)}
                      className="input"
                      rows={3}
                      placeholder="Enter your question"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Options *
                    </label>
                    <div className="space-y-2">
                      {question.options.map((option, optionIndex) => (
                        <div key={optionIndex} className="flex items-center space-x-3">
                          <input
                            type="radio"
                            name={`correct-${questionIndex}`}
                            checked={question.correctAnswer === optionIndex}
                            onChange={() => handleQuestionChange(questionIndex, 'correctAnswer', optionIndex)}
                            className="w-4 h-4 text-primary-600"
                          />
                          <input
                            type="text"
                            value={option}
                            onChange={(e) => handleOptionChange(questionIndex, optionIndex, e.target.value)}
                            className="input flex-1"
                            placeholder={`Option ${optionIndex + 1}`}
                            required
                          />
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Points
                      </label>
                      <input
                        type="number"
                        min="1"
                        max="10"
                        value={question.points}
                        onChange={(e) => handleQuestionChange(questionIndex, 'points', parseInt(e.target.value))}
                        className="input"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Explanation (optional)
                      </label>
                      <input
                        type="text"
                        value={question.explanation}
                        onChange={(e) => handleQuestionChange(questionIndex, 'explanation', e.target.value)}
                        className="input"
                        placeholder="Explain the correct answer"
                      />
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Submit Buttons */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={() => navigate('/admin/quizzes')}
            className="btn btn-secondary"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="btn btn-primary flex items-center"
          >
            {loading ? (
              <LoadingSpinner size="sm" className="mr-2" />
            ) : (
              <FiSave className="w-4 h-4 mr-2" />
            )}
            Create Quiz
          </button>
        </div>
      </form>
    </div>
  </AdminLayout>
);
};

export default CreateQuiz;
